
==================== FINAL INTERFACE ====================
2016-01-31 22:19:44.159019 UTC

interface main@main:Parser 7103
  interface hash: d803ef58ff32dc5af1872295714da0c7
  ABI hash: 0d418376553c4e40fe1ed7006005eb1b
  export-list hash: 321ec747de883e2fd0cf8c9849fed361
  orphan hash: 996c1d4ba6d2253c3ed23221549fb91a
  flag hash: f018113864ba7bd7bbf786476c05887f
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.parseCond
  Parser.parsePatients
  Parser.parseQualityMeasures
  Parser.Numerator
  Parser.NumeratorOption
module dependencies: QualityMeasures
package dependencies: array-0.5.1.0@array_67iodizgJQIIxYVTp4emlA
                      base-4.8.2.0* binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi
                      bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6
                      containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU
                      deepseq-1.4.1.1@deeps_6vMKxt5sPFR0XsbRWvvq59 ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0 mtl-2.2.1@mtl_Aue4leSeVkpKLsfHIV51E8
                      parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv
                      text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI
                      transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
         binary-0.7.5.0@binar_3uXFWMoAGBg0xKP9MHKRwi:Data.Binary.Generic
         bytestring-0.10.6.0@bytes_6VWy06pWzJq9evDvK2d4w6:Data.ByteString.Builder
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Show
         transformers-0.4.2.0@trans_GZTjP9K5WFq01xC9BAGQpF:Control.Monad.Trans.Error
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Functor.Identity
                         base-4.8.2.0:Data.Monoid base-4.8.2.0:Data.Type.Equality
                         base-4.8.2.0:Data.Void base-4.8.2.0:GHC.Exts
                         base-4.8.2.0:GHC.Generics
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntMap.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.IntSet.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Map.Base
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Sequence
                         containers-0.5.6.2@conta_2C3ZI8RgPO2LBMidXKTvIU:Data.Set.Base
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text
                         text-1.2.2.0@text_5c7VCmRXJenGcMPs3kwpkI:Data.Text.Lazy
import  -/  base-4.8.2.0:Control.Applicative 0618a67d93e645466d44bca4e852eb34
import  -/  base-4.8.2.0:Data.Either b111a97273971fe42fb746597ff3b293
import  -/  base-4.8.2.0:Data.Foldable 37c1dcdf6448d7800d277e5be0c3fc6f
import  -/  base-4.8.2.0:Data.Functor 5c701b0af1708f0192a25dfe14ce6274
import  -/  base-4.8.2.0:GHC.Base bf56e93e483b6a281ad97fedb63bfd04
import  -/  base-4.8.2.0:GHC.Show 81f797f6fb519cae2341362c0c4308de
import  -/  base-4.8.2.0:Prelude 0f9dd1bcfa413fa55bb6dca444292bf6
import  -/  base-4.8.2.0:Text.Read 8dc468847f4d0ed117de32cf47cec10a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  QualityMeasures 23c4b97e163a977831a144ec15f09520
  exports: f26cdfbf71bdb0a9d72e56fd3a1292a0
  AgeGEQ 2a5103ccf9a41a9b9e027888c0de7c26
  And 2710aa26b6b037071da61fae2418c8f8
  CPT a27b25b7ed335e8e0136eb55ecaed431
  Code ecf12961bab6d8fa99a690a912c23c0b
  Complete d61d9b90f79cb13511c9f25404007adb
  Cond 10aa45289349827a1c1291d79b855b58
  ICD10 cf2b0dd09c4cecc4be09d6c1ad93eb15
  Not e12df9654abdaa272efdd8462f02912f
  Or cb290bfdab1f3cccf53f1145e975aaf9
  Partial 93bf0cd2011e3835a9f6a8b624414c66
  Patient 24a2d7ddf2a38e4a3d8f65dfc0dbd4bc
  Patient 0768ff469fb0391b09b03bff7854fd23
  Prop 0a7af72e7134ffa5ca0e5dd737aaf0a5
  Prop 3bccca5e3d5ee1ed2fb66456f6ab6a97
  Q 6ccf41fcc5f874e83c97231c94b03356
  age 0407ff237d98c56b5f297f3e2fdf2332
  diags b0a016c3147f3979ac338e9b2b419e10
  procs 2018fb85db6e3e77b2f0e2740b8d9f62
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec cd641c471d37c56fce6c0888a7593ef6
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec.Char c7bec30bc824df698f401960228232d8
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec.Combinator 249c24f1a4a7212d9aad516917736084
import  -/  parsec-3.1.9@parse_EE5NO1mlYLh4J8mgDEshNv:Text.Parsec.Prim f76deb1292ffbc312e0e2b3c1e033b54
d76f3c8ca7be9736c39f5482f905ee85
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok) -}
0b1e8ba8a3fc3aea42f5050995805e19
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: INLINE (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok ds :: [tok] ->
                 case ds of wild {
                   []
                   -> GHC.Base.$
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Nothing @ (tok, [tok]))
                   : t ts
                   -> GHC.Base.$
                        @ (GHC.Base.Maybe (tok, [tok]))
                        @ (Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok])))
                        (Data.Functor.Identity.$fApplicativeIdentity_$cpure
                           @ (GHC.Base.Maybe (tok, [tok])))
                        (GHC.Base.Just @ (tok, [tok]) (t, ts)) }) -}
aca504f67e10004e85f23c75b069a707
  $sread :: GHC.Base.String -> GHC.Types.Int
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ s :: GHC.Base.String ->
                 case Text.Read.readEither
                        @ GHC.Types.Int
                        GHC.Read.$fReadInt
                        s of wild {
                   Data.Either.Left x1 -> GHC.Err.error @ GHC.Types.Int x1
                   Data.Either.Right y -> y }) -}
6a37367e977b03334fa140c3aa681201
  type Numerator = [Parser.NumeratorOption]
6e01f7ae749070a0a7871685ab76cbb2
  type NumeratorOption = (GHC.Base.String, QualityMeasures.Code)
1976afaf4ea9bfef36e2eae74f936031
  type Parser a = Text.Parsec.Prim.Parsec GHC.Base.String () a
36c8ae75aff2e6defed3306eb5540ba2
  parseCond :: GHC.Base.String -> QualityMeasures.Cond
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Base.String ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ ()
                         @ Data.Functor.Identity.Identity
                         @ QualityMeasures.Cond
                         @ GHC.Types.Char
                         (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                         Parser.parseCond3
                           `cast`
                         (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                   <GHC.Base.String>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <QualityMeasures.Cond>_R))
                         GHC.Tuple.()
                         (GHC.Types.[] @ GHC.Types.Char)
                         s)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError QualityMeasures.Cond>_R) of wild {
                   Data.Either.Left err -> Parser.parseCond1 err
                   Data.Either.Right c -> c }) -}
f9b67ffed11453fb623379d8bf0517c9
  parseCond1 :: Text.Parsec.Error.ParseError -> QualityMeasures.Cond
  {- Arity: 1, Strictness: <B,1*U(U(1*U,U,U),1*U)>b,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Text.Parsec.Error.ParseError ->
                 case w of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                 case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                 Parser.parseCond2 ww4 ww5 ww6 ww2 } }) -}
a8acd9251bcdb9f660e37ae25da54c6e
  parseCond2 ::
    Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Text.Parsec.Error.Message]
    -> QualityMeasures.Cond
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>b -}
d5eacb6f84633d7581abeec81b3e3c60
  parseCond3 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (QualityMeasures.Cond
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (QualityMeasures.Cond
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(U)> -}
ff652a55876233ced81d3da24ead7d19
  parsePatients ::
    GHC.Base.String
    -> GHC.Base.String -> [(GHC.Base.String, QualityMeasures.Patient)]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ filename :: GHC.Base.String s :: GHC.Base.String ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ ()
                         @ Data.Functor.Identity.Identity
                         @ [(GHC.Base.String, QualityMeasures.Patient)]
                         @ GHC.Types.Char
                         (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                         Parser.parsePatients3
                           `cast`
                         (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <[(GHC.Base.String, QualityMeasures.Patient)]>_R))
                         GHC.Tuple.()
                         filename
                         s)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError
                              [(GHC.Base.String, QualityMeasures.Patient)]>_R) of wild {
                   Data.Either.Left err -> Parser.parsePatients1 err
                   Data.Either.Right c -> c }) -}
fc86aedcf581445c196c9063a577c267
  parsePatients1 ::
    Text.Parsec.Error.ParseError
    -> [(GHC.Base.String, QualityMeasures.Patient)]
  {- Arity: 1, Strictness: <B,1*U(U(1*U,U,U),1*U)>b,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Text.Parsec.Error.ParseError ->
                 case w of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                 case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                 Parser.parsePatients2 ww4 ww5 ww6 ww2 } }) -}
657d922cf7a11bf1811cf45c9f20792b
  parsePatients10 :: [GHC.Base.String]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Text.Parsec.Char.digit2
                   (GHC.Types.[] @ GHC.Base.String)) -}
b95fd8bb1af8c95eb5e0d97fb93927f6
  parsePatients11 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (\ @ b
                   w2 :: Text.Parsec.Prim.State GHC.Base.String ()[OneShot]
                   w3 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w4 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w5 :: GHC.Types.Char
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot]
                   w6 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b[OneShot] ->
                 case w2 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww2 of ww4 { Text.Parsec.Pos.SourcePos ww5 ww6 ww7 ->
                 Text.Parsec.Char.$wa
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Unicode.isDigit
                   @ b
                   ww1
                   ww5
                   ww6
                   ww7
                   ww3
                   w3
                   w6 } }) -}
439aba64fbea929fcd1f2d5b966857a4
  parsePatients12 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([(GHC.Base.String, QualityMeasures.Patient)]
         -> [(GHC.Base.String, QualityMeasures.Patient)])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([(GHC.Base.String, QualityMeasures.Patient)]
         -> [(GHC.Base.String, QualityMeasures.Patient)])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta4 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta5 :: ([(GHC.Base.String, QualityMeasures.Patient)]
                            -> [(GHC.Base.String, QualityMeasures.Patient)])
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta7 :: ([(GHC.Base.String, QualityMeasures.Patient)]
                            -> [(GHC.Base.String, QualityMeasures.Patient)])
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta8 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 let {
                   lvl16 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1
                   = eta7 (GHC.Base.id @ [(GHC.Base.String, QualityMeasures.Patient)])
                 } in
                 let {
                   lvl17 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1
                   = eta5 (GHC.Base.id @ [(GHC.Base.String, QualityMeasures.Patient)])
                 } in
                 Text.Parsec.Char.spaces1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   @ b1
                   eta4
                   (\ x1 :: () -> lvl17)
                   eta6
                   (\ x1 :: () -> lvl16)
                   eta8) -}
85525af38499313a8be3669c0a558672
  parsePatients2 ::
    Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Text.Parsec.Error.Message]
    -> [(GHC.Base.String, QualityMeasures.Patient)]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>b -}
86b45f185262d57efd1531ebd0f53031
  parsePatients3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([(GHC.Base.String, QualityMeasures.Patient)]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([(GHC.Base.String, QualityMeasures.Patient)]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   w3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   w4 :: [(GHC.Base.String, QualityMeasures.Patient)]
                         -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w5 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w6 :: [(GHC.Base.String, QualityMeasures.Patient)]
                         -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w7 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Prim.$wa
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ [(GHC.Base.String, QualityMeasures.Patient)]
                   Parser.parsePatients5
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <() -> [(GHC.Base.String, QualityMeasures.Patient)]>_R))
                   Parser.parsePatients4
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   w3
                   w4
                   w5
                   w6
                   w7) -}
b905d5dfa0a181934d4255d8f06951e7
  parsePatients4 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (()
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Unfolding: (Text.Parsec.Combinator.eof1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   GHC.Show.$fShowChar) -}
a72221d9a2f1b8b2a02e182faf5106a7
  parsePatients5 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((() -> [(GHC.Base.String, QualityMeasures.Patient)])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((() -> [(GHC.Base.String, QualityMeasures.Patient)])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   cok :: (() -> [(GHC.Base.String, QualityMeasures.Patient)])
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1
                   cerr :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eok :: (() -> [(GHC.Base.String, QualityMeasures.Patient)])
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1
                   eerr :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Prim.$wa
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [(GHC.Base.String, QualityMeasures.Patient)]
                   @ [(GHC.Base.String, QualityMeasures.Patient)]
                   Parser.parsePatients12
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Base.String, QualityMeasures.Patient)]
                              -> [(GHC.Base.String, QualityMeasures.Patient)]>_R))
                   Parser.parsePatients6
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Base.String, QualityMeasures.Patient)]>_R))
                   @ b1
                   s1
                   (\ x1 :: [(GHC.Base.String, QualityMeasures.Patient)] ->
                    cok (\ ds :: () -> x1))
                   cerr
                   (\ x1 :: [(GHC.Base.String, QualityMeasures.Patient)] ->
                    eok (\ ds :: () -> x1))
                   eerr) -}
654a867309ca26ef77befdad38b1cdf8
  parsePatients6 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([(GHC.Base.String, QualityMeasures.Patient)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([(GHC.Base.String, QualityMeasures.Patient)]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   w1 :: Text.Parsec.Prim.State GHC.Base.String ()
                   w2 :: [(GHC.Base.String, QualityMeasures.Patient)]
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w3 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w4 :: [(GHC.Base.String, QualityMeasures.Patient)]
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w5 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Prim.$wa9
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ (GHC.Base.String, QualityMeasures.Patient)
                   Parser.parsePatients7
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(GHC.Base.String, QualityMeasures.Patient)>_R))
                   @ b
                   w1
                   w2
                   w3
                   w4) -}
4d0285633fdd48ec42665944ea60a841
  parsePatients7 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String, QualityMeasures.Patient)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String, QualityMeasures.Patient)
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   eta4 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta5 :: (GHC.Base.String, QualityMeasures.Patient)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta7 :: (GHC.Base.String, QualityMeasures.Patient)
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta8 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.many3
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Parser.parsePatients9
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   eta4
                   (\ x1 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Parser.parsePatients8
                      x1
                      @ b1
                      s2
                      eta5
                      eta6
                      (\ x2 :: (GHC.Base.String, QualityMeasures.Patient)
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta5 x2 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta6 (Text.Parsec.Error.mergeError err err')))
                   eta6
                   (\ x1 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Parser.parsePatients8
                      x1
                      @ b1
                      s2
                      eta5
                      eta6
                      (\ x2 :: (GHC.Base.String, QualityMeasures.Patient)
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta7 x2 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta8 (Text.Parsec.Error.mergeError err err')))
                   eta8) -}
cf7ffc70676ff116c371648b0b4a40de
  parsePatients8 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> ((GHC.Base.String, QualityMeasures.Patient)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> ((GHC.Base.String, QualityMeasures.Patient)
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
768b231317136382af4665fc9e12f306
  parsePatients9 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (GHC.Types.Char
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b
                   eta4 :: Text.Parsec.Prim.State GHC.Base.String ()
                   eta5 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta7 :: GHC.Types.Char
                           -> Text.Parsec.Prim.State GHC.Base.String ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b
                   eta8 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Prim.<?>2
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Parser.parsePatients11
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   Parser.parsePatients10
                   @ b
                   eta4
                   eta5
                   eta6
                   eta7
                   eta8) -}
dd1f1a1b7c46a0480fec393ef242e65c
  parseQualityMeasures ::
    GHC.Base.String
    -> GHC.Base.String
    -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: (\ filename :: GHC.Base.String s :: GHC.Base.String ->
                 case (Text.Parsec.Prim.runPT
                         @ GHC.Base.String
                         @ ()
                         @ Data.Functor.Identity.Identity
                         @ [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                         @ GHC.Types.Char
                         (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                         Parser.parseQualityMeasures3
                           `cast`
                         (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                                   <[GHC.Types.Char]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <[(GHC.Base.String,
                                      (Parser.Numerator, QualityMeasures.Cond))]>_R))
                         GHC.Tuple.()
                         filename
                         s)
                        `cast`
                      (Data.Functor.Identity.NTCo:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError
                              [(GHC.Base.String,
                                (Parser.Numerator, QualityMeasures.Cond))]>_R) of wild {
                   Data.Either.Left err -> Parser.parseQualityMeasures1 err
                   Data.Either.Right c -> c }) -}
8ce509885c8648a2d3b55d60b7a4eeb8
  parseQualityMeasures1 ::
    Text.Parsec.Error.ParseError
    -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
  {- Arity: 1, Strictness: <B,1*U(U(1*U,U,U),1*U)>b,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ w :: Text.Parsec.Error.ParseError ->
                 case w of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                 case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                 Parser.parseQualityMeasures2 ww4 ww5 ww6 ww2 } }) -}
4d5096f503b34ec628f7776c79f41b6e
  parseQualityMeasures2 ::
    Text.Parsec.Pos.SourceName
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Text.Parsec.Error.Message]
    -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>b -}
5283f2f857345b4f182544089c80ea54
  parseQualityMeasures3 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ([(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ([(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   w3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   w4 :: [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                         -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w5 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w6 :: [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                         -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1
                   w7 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Prim.$wa
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ ()
                   @ [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                   Parser.parseQualityMeasures4
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()
                              -> [(GHC.Base.String,
                                   (Parser.Numerator, QualityMeasures.Cond))]>_R))
                   Parser.parsePatients4
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <()>_R))
                   @ b1
                   w3
                   w4
                   w5
                   w6
                   w7) -}
fe8074d0541c0842a4eda8ebd7e583ec
  parseQualityMeasures4 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((()
         -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((()
         -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   s1 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   cok :: (()
                           -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1
                   cerr :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eok :: (()
                           -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
                          -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                          -> Text.Parsec.Error.ParseError
                          -> Data.Functor.Identity.Identity b1
                   eerr :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Prim.$wa
                   @ [GHC.Types.Char]
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                   @ [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                   Parser.parseQualityMeasures8
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                              -> [(GHC.Base.String,
                                   (Parser.Numerator, QualityMeasures.Cond))]>_R))
                   Parser.parseQualityMeasures5
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <[(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]>_R))
                   @ b1
                   s1
                   (\ x1 :: [(GHC.Base.String,
                              (Parser.Numerator, QualityMeasures.Cond))] ->
                    cok (\ ds :: () -> x1))
                   cerr
                   (\ x1 :: [(GHC.Base.String,
                              (Parser.Numerator, QualityMeasures.Cond))] ->
                    eok (\ ds :: () -> x1))
                   eerr) -}
23698a2bffbb0109a0a81738fedb9e84
  parseQualityMeasures5 ::
    Text.Parsec.Prim.State GHC.Base.String ()
    -> ([(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> ([(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
        -> Text.Parsec.Prim.State GHC.Base.String ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5,
     Strictness: <L,U(U,U(U,U,U),U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (5, True, True)
                (\ @ b
                   w1 :: Text.Parsec.Prim.State GHC.Base.String ()
                   w2 :: [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w3 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w4 :: [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
                         -> Text.Parsec.Prim.State GHC.Base.String ()
                         -> Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b
                   w5 :: Text.Parsec.Error.ParseError
                         -> Data.Functor.Identity.Identity b ->
                 Text.Parsec.Prim.$wa9
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ (GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))
                   Parser.parseQualityMeasures6
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <[GHC.Types.Char]>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))>_R))
                   @ b
                   w1
                   w2
                   w3
                   w4) -}
6f1d1674535aeb47e44bb43874ce7035
  parseQualityMeasures6 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> ((GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> ((GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   eta4 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta5 :: (GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta7 :: (GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta8 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 Text.Parsec.Combinator.many3
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ GHC.Types.Char
                   Parser.parsePatients9
                     `cast`
                   (Sym (Text.Parsec.Prim.NTCo:ParsecT[0]
                             <GHC.Base.String>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <GHC.Types.Char>_R))
                   @ b1
                   eta4
                   (\ x1 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Parser.parseQualityMeasures7
                      x1
                      @ b1
                      s2
                      eta5
                      eta6
                      (\ x2 :: (GHC.Base.String,
                                (Parser.Numerator, QualityMeasures.Cond))
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta5 x2 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta6 (Text.Parsec.Error.mergeError err err')))
                   eta6
                   (\ x1 :: [GHC.Types.Char]
                      s2 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                      err :: Text.Parsec.Error.ParseError[OneShot] ->
                    Parser.parseQualityMeasures7
                      x1
                      @ b1
                      s2
                      eta5
                      eta6
                      (\ x2 :: (GHC.Base.String,
                                (Parser.Numerator, QualityMeasures.Cond))
                         s3 :: Text.Parsec.Prim.State [GHC.Types.Char] ()[OneShot]
                         err' :: Text.Parsec.Error.ParseError[OneShot] ->
                       eta7 x2 s3 (Text.Parsec.Error.mergeError err err'))
                      (\ err' :: Text.Parsec.Error.ParseError ->
                       eta8 (Text.Parsec.Error.mergeError err err')))
                   eta8) -}
7b960c2ed63204c847eff973014ae9f0
  parseQualityMeasures7 ::
    [GHC.Types.Char]
    -> forall b.
       Text.Parsec.Prim.State [GHC.Types.Char] ()
       -> ((GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> ((GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))
           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
d121d642d273f0c169c6a930eb08b130
  parseQualityMeasures8 ::
    Text.Parsec.Prim.State [GHC.Types.Char] ()
    -> (([(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
         -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (([(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))]
         -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
        -> Text.Parsec.Prim.State [GHC.Types.Char] ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b1)
    -> Data.Functor.Identity.Identity b1
  {- Arity: 5,
     Strictness: <L,U><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ b1
                   eta4 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                   eta5 :: ([(GHC.Base.String,
                              (Parser.Numerator, QualityMeasures.Cond))]
                            -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta6 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta7 :: ([(GHC.Base.String,
                              (Parser.Numerator, QualityMeasures.Cond))]
                            -> [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
                           -> Text.Parsec.Prim.State [GHC.Types.Char] ()
                           -> Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1
                   eta8 :: Text.Parsec.Error.ParseError
                           -> Data.Functor.Identity.Identity b1 ->
                 let {
                   lvl16 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1
                   = eta7
                       (GHC.Base.id
                          @ [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
                 } in
                 let {
                   lvl17 :: Text.Parsec.Prim.State [GHC.Types.Char] ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b1
                   = eta5
                       (GHC.Base.id
                          @ [(GHC.Base.String, (Parser.Numerator, QualityMeasures.Cond))])
                 } in
                 Text.Parsec.Char.spaces1
                   @ GHC.Base.String
                   @ ()
                   @ Data.Functor.Identity.Identity
                   (Parser.$s$fStream[]mtok @ GHC.Types.Char)
                   @ b1
                   eta4
                   (\ x1 :: () -> lvl17)
                   eta6
                   (\ x1 :: () -> lvl16)
                   eta8) -}
"SPEC/Parser $fStream[]mtok _ @ Identity" [ALWAYS] forall @ tok
                                                          $dMonad :: GHC.Base.Monad
                                                                       Data.Functor.Identity.Identity
  Text.Parsec.Prim.$fStream[]mtok @ tok
                                  @ Data.Functor.Identity.Identity
                                  $dMonad
  = Parser.$s$fStream[]mtok @ tok
"SPEC/Parser $fStream[]mtok_$cuncons _ @ Identity" [ALWAYS] forall @ tok
                                                                   $dMonad :: GHC.Base.Monad
                                                                                Data.Functor.Identity.Identity
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ tok
                                           @ Data.Functor.Identity.Identity
                                           $dMonad
  = Parser.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons @ tok
"SPEC/Parser read @ Int" [ALWAYS] forall $dRead :: GHC.Read.Read
                                                     GHC.Types.Int
  Text.Read.read @ GHC.Types.Int $dRead = Parser.$sread
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

